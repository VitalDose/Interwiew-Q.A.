Junior

 

Теория тестирования

1. Что такое тестирование? - Тестирование программного обеспечения – это:

– процесс исследования ПО с целью получения информации о качестве продукта;

– процесс проверки соответствия заявленных к продукту требований и реально реализованной функциональности, осуществляемый путем наблюдения за его работой в искусственно созданных ситуациях и на ограниченном наборе тестов, выбранных определенным образом;

– оценка системы с тем, чтобы найти различия между тем, какой система должна быть и какой она есть.

2. Зачем тестировать ПО? -  Основная — показать то, что продукт готов к выпуску на рынок, что все заявленные разработчиком функции стабильно работают. Тестирование нужно как самим разработчика, чтобы удостовериться в готовности продукта, так и заказчикам, чтобы видеть за что они заплатили.

3. Какие существуют этапы тестирования? 
Анализ продукта
Работа с требованиями
Разработка стратегии тестирования и планирование процедур контроля качества
Создание тестовой документации
Тестирование прототипа
Основное тестирование
Стабилизация
Эксплуатация

4. Какие типы тестирования можете назвать?
Модульные тесты 
Интеграционное тестирование 
Функциональные тесты
Сквозные тесты 
Приемочное тестирование 
Тестирование производительности 
Smoke-тестирование

5. Какие уровни тестирования знаете?
Компонентное или Модульное тестирование (Component Testing or Unit Testing)
Интеграционное тестирование (Integration Testing)
Системное тестирование (System Testing)
Приемочное тестирование (Acceptance Testing)

6. Какие техники тест-дизайна знаете?
Эквивалентное разделение (Equivalence Partitioning)
Граничные значения (Boundary Values)
Парное тестирование (Pairwise Testing)
Угадывание ошибок (Error Guessing)
Исследовательское тестирование (Exploratory Testing)

7. Что такое техника анализа классов эквивалентности?
Как пример, у вас есть диапазон допустимых значений от 1 до 10, вы должны выбрать одно верное значение внутри интервала, скажем, 5, и одно неверное значение вне интервала - 0.

8. Что такое техника анализа предельных значений? В чем ценность этой техники?
Граничное значение (border condition, boundary condition) — это значение, которое находится на границе классов эквивалентности. Техника анализа граничных значений (boundary value testing) — техника, проверяющее поведение системы, либо отдельного модуля на граничных значениях входных данных.

9. Что такое Regression и Confirmation тестирование, какая между ними разница?
Ре-тест: проводится в случае, если фича/функциональность уже имела дефекты, и эти дефекты были недавно исправлены
Регрессионные тесты: собственно то, что занимает львиную долю времени и для чего существует автоматизация тестирования. Проводится регрессионное тестирование AUT тогда, когда нужно убедиться что новые (добавленные) функции приложения / исправленные дефекты не оказали влияния на текущую, уже существующую функциональность, работавшую (и протестированную) ранее.

10. Как часто следует проводить регрессионное тестирование продукта?
Регрессионное тестирование рекомендуется проводить каждый раз после корректировки программы или сайта, которая может включать исправление дефектов, слияние кода, миграцию на другую ОС или БД, добавление новой функциональности и другие изменения.

11. Какие бывают виды интеграционного тестирования?
Снизу вверх (Bottom Up Integration)
Все низкоуровневые модули, процедуры или функции собираются воедино и затем тестируются. После чего собирается следующий уровень модулей для проведения интеграционного тестирования. Данный подход считается полезным, если все или практически все модули, разрабатываемого уровня, готовы. Также данный подход помогает определить по результатам тестирования уровень готовности приложения (см. также Integration testing - Bottom Up)
Сверху вниз (Top Down Integration)
Вначале тестируются все высокоуровневые модули, и постепенно один за другим добавляются низкоуровневые. Все модули более низкого уровня симулируются заглушками с аналогичной функциональностью, затем по мере готовности они заменяются реальными активными компонентами. Таким образом мы проводим тестирование сверху вниз. (см. также Top Down Integration)
Большой взрыв ("Big Bang" Integration)
Все или практически все разработанные модули собираются вместе в виде законченной системы или ее основной части, и затем проводится интеграционное тестирование. Такой подход очень хорош для сохранения времени. Однако если тест кейсы и их результаты записаны не верно, то сам процесс интеграции сильно осложнится, что станет преградой для команды тестирования при достижении основной цели интеграционного тестирования (см. также Integration testing - Big Bang)

12. Что такое Configuration Testing?

13. Что такое Exploratory Testing?

14. Какие существуют UI-стандарты?

15. Что такое Black/Grey/White Box Testing?

16. Что такое Performance Testing?

17. Что такое Smoke и Sanity тестирование и какая между ними разница?

18. Что такое Traceability Matrix?

19. Что такое Sanity Testing?

20. Что такое End-to-End тест?

21. Что такое тестирование безопасности?

22. Что такое испытание на основе рисков?

23. Что такое динамическое тестирование?

24. Что такое «парадокс пестицида»?

25. Опишите основные фазы STLC? Дайте определение Entry и Exit Criteria.

26. Что такое Bug, Error, Failure, Fault?

27. Какие есть атрибуты баг-репорта? Какие основные поля для заполнения?

28. Какова разница между приоритетом и серьезностью?

29. Приведите примеры серьезного, но не приоритетного бага.

30. В чем разница между валидацией и верификацией?

31. Зачем нужна тестовая документация? Какие её виды?

32. Что такое тест-план? Какие элементы у него есть?

33. Какую обязательную информацию должен содержать тест-план? Как правильно его использовать, поддерживать и нужен ли он вообще для большинства проектов?

34. Какая разница между чеклистом и тест-кейсами?

35. Приведите пример хорошего тест-кейса.

Git

67. Для чего используют системы контроля версий?

68. Что такое Git? Каков принцип его работы?

69. Что такое commits, branches в Git?

70. Для чего нужны GitHub, GitLab и другие, базирующиеся на Git, вебхостинги проектов?

Web

76. Что такое клиент-серверная архитектура?

77. Что может выступать в роли клиента?

78. Что такое REST API, SOAP? В чем разница?

79. Какие протоколы передачи данных знаете?

80. Какие способы взаимодействия с API существуют? В чем разница между ними?

81. Как можно протестировать API, что там нужно проверять?

82. Как расшифровывается CRUD?

83. Чем отличается GET от POST?

84. Какие отличия между XML и JSON?

85. Какие знаете форматы передачи данных?

86. Как происходит шифрование?

87. Какие бывают виды баз данных?

88. Охарактеризуйте каждый класс status code (1хх; 2xx; 3xx; 4xx; 5xx).

89. Какие есть HTTP-методы?

90. Какие знаете Web elements?

91. Какие браузеры знаете? В чем их отличие?

92. Для чего необходимы инструменты разработчика в браузере (Chrome DevTools) и как они помогают в тестировании.

93. Что такое кэш?

94. Что такое сессия?

95. Зачем нужны cookies?

96. Что такое фрейм?

97. Что такое HTML/CSS/JavaScript?

98. Какую структуру имеет веб-страница?

99. Зачем чистить кэш?

100. Какие виды тестирования можно применить только к Web?

101. Для чего в веб-страницах используют JavaScript?

102. Что такое REST?

103. Что такое AJAX?

Mobile

104. Какие мобильные платформы существуют?

105. Какие версии Android и iOS используются на рынке (минимальные и максимальные)?

106. Какие версии Android нужно тестировать, если заказчик сказал поддерживать с версии 5.0?

107. Назовите типы мобильных приложений.

108. Каков формат файлов сборок приложений для Android и iOS?

109. Что такое ADB?

110. Как снять логи с AOS/IOS?

111. Что нужно проверять при использовании сканера отпечатка/Face ID?

112. Как я могу запускать тесты Android без Appium?

113. Объясните концепцию дизайна Appium.
